-- Create Table for for bill_details
DROP TABLE IF EXISTS BILL_DETAILS;
CREATE TABLE BILL_DETAILS (ID int PRIMARY KEY NOT NULL,PARTNER_UUID VARCHAR(20) NOT NULL,CREATED_AT TIMESTAMP NOT NULL,AMOUNT int NOT NULL,STATUS VARCHAR(20) NOT NULL,ERROR_CODE VARCHAR(20) NOT NULL);

-- Create Table for for driver_features
DROP TABLE IF EXISTS DRIVER_FEATURES;
CREATE TABLE DRIVER_FEATURES (PARTNER_UUID VARCHAR(20) PRIMARY KEY NOT NULL,FIRST_NAME VARCHAR(20) NOT NULL,LAST_NAME VARCHAR(20) NOT NULL,LAST_TRIP_TIMESTAMP TIMESTAMP NOT NULL,LIFETIME_TRIPS int NOT NULL,SIGNUP_CITY_NAME VARCHAR(20) NOT NULL,SIGNUP_TS TIMESTAMP NOT NULL);

-- Create Table for for city_features
DROP TABLE IF EXISTS CITY_FEATURES;
CREATE TABLE CITY_FEATURES (CITY_ID int PRIMARY KEY NOT NULL,CITY_NAME VARCHAR(20) NOT NULL,COUNTRY_ID int NOT NULL,COUNTRY_NAME VARCHAR(20) NOT NULL,CURRENCY_CODE VARCHAR(20) NOT NULL);

-- Import Excel spreadsheet for bill_details
COPY BILL_DETAILS(ID,PARTNER_UUID,CREATED_AT,AMOUNT,STATUS,ERROR_CODE)
FROM 'C:\Users\Soorya\Desktop\SQL\OWN PRACTICE\Skuad\bill_details.csv'
DELIMITER ',';

-- Import Excel spreadsheet for driver_features
COPY DRIVER_FEATURES(PARTNER_UUID,FIRST_NAME,LAST_NAME,LAST_TRIP_TIMESTAMP,LIFETIME_TRIPS,SIGNUP_CITY_NAME,SIGNUP_TS)
FROM 'C:\Users\Soorya\Desktop\SQL\OWN PRACTICE\Skuad\driver_features.csv'
DELIMITER ','
CSV HEADER;

-- Import Excel spreadsheet for city_features
COPY CITY_FEATURES(CITY_ID,CITY_NAME,COUNTRY_ID,COUNTRY_NAME,CURRENCY_CODE) 
FROM 'C:\Users\Soorya\Desktop\SQL\OWN PRACTICE\Skuad\city_features.csv'
DELIMITER ','
CSV HEADER;

-- Part(a) List of Bills Created in June 2016 and less than 500.00
SELECT *
FROM BILL_DETAILS
WHERE CREATED_AT BETWEEN '2016-06-01 00:00:00'::TIMESTAMP AND '2016-06-30 23:59:59'::TIMESTAMP
AND AMOUNT < 500.00;

-- Create view called test1 that lists driver details with last trip that occurred less than 2 weeks ago
DROP VIEW IF EXISTS test1;
CREATE VIEW test1 AS SELECT *
FROM DRIVER_FEATURES WHERE LAST_TRIP_TIMESTAMP >= NOW() - INTERVAL '14 DAY';

-- Create view called test2 that lists bill details that never had any error in bill processing
DROP VIEW IF EXISTS test2;
CREATE VIEW test2 AS SELECT *
FROM BILL_DETAILS WHERE ERROR_CODE = 'NA';

-- Create view called test3 that lists country_id corresponding to Jakarta in city_features
DROP VIEW IF EXISTS test3;
CREATE VIEW test3 AS SELECT COUNTRY_ID FROM CITY_FEATURES
WHERE CITY_NAME = 'Jakarta';

-- Part(b) Output number of partners who paid in Jakarta whose last trip was less than 2 weeks ago and never had any bill processing error
SELECT COUNT(DF.PARTNER_UUID) AS NUMBER_OF_PARTNERS FROM DRIVER_FEATURES DF
INNER JOIN test1 ON test1.LAST_TRIP_TIMESTAMP = DF.LAST_TRIP_TIMESTAMP
INNER JOIN test2 ON DF.PARTNER_UUID = test2.PARTNER_UUID
INNER JOIN test3 ON DF.SIGNUP_CITY_NAME::INTEGER = test3.COUNTRY_ID;

-- Create view called test4 that lists bill details that were created in 2016, ordered chronologically
DROP VIEW IF EXISTS test4;
CREATE VIEW test4 AS SELECT *
FROM BILL_DETAILS WHERE CREATED_AT BETWEEN '2016-01-01 00:00:00'::TIMESTAMP AND '2016-12-31 23:59:59'::TIMESTAMP 
ORDER BY CREATED_AT;

-- Create view called test5 that lists country_id corresponding to MXN currency in city_features
DROP VIEW IF EXISTS test5;
CREATE VIEW test5 AS SELECT DISTINCT COUNTRY_ID FROM CITY_FEATURES
WHERE CURRENCY_CODE = 'MXN'

-- Create view called test6 that lists partner_uuid, their names and amount who spent in MXN currency
DROP VIEW IF EXISTS test6;
CREATE VIEW test6 AS SELECT DRIVER_FEATURES.PARTNER_UUID, CONCAT(DRIVER_FEATURES.FIRST_NAME, ' ',DRIVER_FEATURES.LAST_NAME) AS PARTNER_NAME, test4.AMOUNT FROM DRIVER_FEATURES
INNER JOIN test5 ON DRIVER_FEATURES.SIGNUP_CITY_NAME::INTEGER = test5.COUNTRY_ID
INNER JOIN test4 ON DRIVER_FEATURES.PARTNER_UUID = test4.PARTNER_UUID;

-- Part(c) Output Top 10 Partner_uuid, their avg MXN bill size in 2016 and their names 
SELECT PARTNER_UUID, AVG(amount)::NUMERIC(10,2) AS AVG_BILL_SIZE, PARTNER_NAME FROM test6 GROUP BY PARTNER_UUID,PARTNER_NAME ORDER BY AVG_BILL_SIZE DESC LIMIT 10;

SELECT * FROM test1;
SELECT * FROM test2;
SELECT * FROM test3;
SELECT * FROM test4;
SELECT * FROM test5;
SELECT * FROM test6;

